//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserMessage", Namespace="http://schemas.datacontract.org/2004/07/ChatService")]
    [System.SerializableAttribute()]
    public partial class UserMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FromIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime SendingTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ToIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FromId {
            get {
                return this.FromIdField;
            }
            set {
                if ((this.FromIdField.Equals(value) != true)) {
                    this.FromIdField = value;
                    this.RaisePropertyChanged("FromId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime SendingTime {
            get {
                return this.SendingTimeField;
            }
            set {
                if ((this.SendingTimeField.Equals(value) != true)) {
                    this.SendingTimeField = value;
                    this.RaisePropertyChanged("SendingTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ToId {
            get {
                return this.ToIdField;
            }
            set {
                if ((this.ToIdField.Equals(value) != true)) {
                    this.ToIdField = value;
                    this.RaisePropertyChanged("ToId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IChatService")]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/RegisterUser", ReplyAction="http://tempuri.org/IChatService/RegisterUserResponse")]
        bool RegisterUser(string login, string password, string email, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/RegisterUser", ReplyAction="http://tempuri.org/IChatService/RegisterUserResponse")]
        System.Threading.Tasks.Task<bool> RegisterUserAsync(string login, string password, string email, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/LogIn", ReplyAction="http://tempuri.org/IChatService/LogInResponse")]
        int LogIn([System.ServiceModel.MessageParameterAttribute(Name="login")] string login1, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/LogIn", ReplyAction="http://tempuri.org/IChatService/LogInResponse")]
        System.Threading.Tasks.Task<int> LogInAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/LogOut", ReplyAction="http://tempuri.org/IChatService/LogOutResponse")]
        void LogOut(int sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/LogOut", ReplyAction="http://tempuri.org/IChatService/LogOutResponse")]
        System.Threading.Tasks.Task LogOutAsync(int sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetUsersList", ReplyAction="http://tempuri.org/IChatService/GetUsersListResponse")]
        string[] GetUsersList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetUsersList", ReplyAction="http://tempuri.org/IChatService/GetUsersListResponse")]
        System.Threading.Tasks.Task<string[]> GetUsersListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SendMessage", ReplyAction="http://tempuri.org/IChatService/SendMessageResponse")]
        bool SendMessage(int sessionId, string loginTo, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SendMessage", ReplyAction="http://tempuri.org/IChatService/SendMessageResponse")]
        System.Threading.Tasks.Task<bool> SendMessageAsync(int sessionId, string loginTo, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetMessagesList", ReplyAction="http://tempuri.org/IChatService/GetMessagesListResponse")]
        ChatClient.ServiceReference1.UserMessage[] GetMessagesList(int sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetMessagesList", ReplyAction="http://tempuri.org/IChatService/GetMessagesListResponse")]
        System.Threading.Tasks.Task<ChatClient.ServiceReference1.UserMessage[]> GetMessagesListAsync(int sessionId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : ChatClient.ServiceReference1.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.ClientBase<ChatClient.ServiceReference1.IChatService>, ChatClient.ServiceReference1.IChatService {
        
        public ChatServiceClient() {
        }
        
        public ChatServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ChatServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool RegisterUser(string login, string password, string email, string description) {
            return base.Channel.RegisterUser(login, password, email, description);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterUserAsync(string login, string password, string email, string description) {
            return base.Channel.RegisterUserAsync(login, password, email, description);
        }
        
        public int LogIn(string login1, string password) {
            return base.Channel.LogIn(login1, password);
        }
        
        public System.Threading.Tasks.Task<int> LogInAsync(string login, string password) {
            return base.Channel.LogInAsync(login, password);
        }
        
        public void LogOut(int sessionId) {
            base.Channel.LogOut(sessionId);
        }
        
        public System.Threading.Tasks.Task LogOutAsync(int sessionId) {
            return base.Channel.LogOutAsync(sessionId);
        }
        
        public string[] GetUsersList() {
            return base.Channel.GetUsersList();
        }
        
        public System.Threading.Tasks.Task<string[]> GetUsersListAsync() {
            return base.Channel.GetUsersListAsync();
        }
        
        public bool SendMessage(int sessionId, string loginTo, string message) {
            return base.Channel.SendMessage(sessionId, loginTo, message);
        }
        
        public System.Threading.Tasks.Task<bool> SendMessageAsync(int sessionId, string loginTo, string message) {
            return base.Channel.SendMessageAsync(sessionId, loginTo, message);
        }
        
        public ChatClient.ServiceReference1.UserMessage[] GetMessagesList(int sessionId) {
            return base.Channel.GetMessagesList(sessionId);
        }
        
        public System.Threading.Tasks.Task<ChatClient.ServiceReference1.UserMessage[]> GetMessagesListAsync(int sessionId) {
            return base.Channel.GetMessagesListAsync(sessionId);
        }
    }
}
